<?xml version="1.0"?>
<!-- *********************************************************** -->
<!-- ** OpenMRS                                               ** -->
<!-- **                                                       ** -->
<!-- ** Open-Source EMR for Developing Countries              ** -->
<!-- **                                                       ** -->
<!-- ** @author Burke Mamlin                                  ** -->
<!-- ** @version 1.0                                          ** -->
<!-- *********************************************************** -->
<project name="OpenMRS" default="dist">

	<tstamp>
		<format property="timestamp" pattern="MM/dd/yyyy hh:mm aa" />
	</tstamp>
	
	<!-- import properties -->
	<import file="properties.xml" />
	
	<echo message="Attempting to load: ${user.home}/.${ant.project.name}-build.properties"/>
	<echo message="Place any default override properties in this file. file format:"/>
	<echo message="property=value"/>
	<echo message="Note: A clean build is needed to refresh the connection properties"/>

    <!-- Taskdefs -->
	<taskdef file="${tomcat.dir}/tomcatTasks.properties">
		<classpath>
			<pathelement path="${tomcat.dir}/catalina-ant.jar"/>
		</classpath>
	</taskdef>
	
	<filterset id="variables.to.replace">
		<filter token="DATABASE-DRIVER_CLASS" value="${database.driver_class}" />
		<filter token="DATABASE-CONNECTION-URL" value="${database.connection.url}" />
		<filter token="DATABASE-USERNAME" value="${database.username}" />
		<filter token="DATABASE-PASSWORD" value="${database.password}" />
		<filter token="DATABASE-NAME" value="${database.name}" />
		<filter token="DATABASE-NAME" value="${database.name}" />
		<filter token="HIBERNATE-LAZY" value="${hibernate.lazy}" />
		<filter token="HIBERNATE-SHOW_SQL" value="${hibernate.show_sql}" />
		<filter token="HIBERNATE-DIALECT" value="${hibernate.dialect}" />
		<filter token="POOL-MAX_SIZE" value="${pool.max_size}" />
		<filter token="POOL-MIN_SIZE" value="${pool.min_size}" />
		<filter token="POOL-TIMEOUT" value="${pool.timeout}" />
		<filter token="POOL-MAX_STATEMENTS" value="${pool.max_statements}" />
		<filter token="POOL-IDLE_TEST_PERIOD" value="${pool.idle_test_period}" />
		<filter token="POOL-ACQUIRE_INCREMENT" value="${pool.acquire_increment}" />
		<filter token="WEBAPP.NAME" value="${webapp.name}" />
		<filter token="WEBAPP.DISPLAY.NAME" value="${webapp.display.name}" />
		<filter token="WEBAPP.DESCRIPTION" value="${webapp.description}" />
		<filter token="TIMESTAMP" value="${timestamp}" />
		
		<filter token="INFOPATH-SERVER-URL" value="${infopath.server.url}"/>
		<filter token="INFOPATH-PUBLISH-URL" value="${infopath.publish.url}"/>
		<filter token="INFOPATH-TASKPANE-CAPTION" value="${infopath.taskpane.caption}"/>
		<filter token="INFOPATH-TASKPANE-INITIAL-URL" value="${infopath.taskpane.initial.url}"/>	
		<filter token="INFOPATH-SUBMIT-URL" value="${infopath.submit.url}"/>
		<filter token="INFOPATH-SCHEMA-FILENAME" value="${infopath.schema.filename}"/>
		<filter token="INFOPATH-OUTPUT-DIR" value="${infopath.output.dir}"/>
	</filterset>

	<!-- *********************************************************** -->
	<!-- **                     TARGETS                           ** -->
	<!-- *********************************************************** -->
	<target name="init" description="initialization">
        <!-- Taskdefs -->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<fileset dir="${ant-contrib.dir}" includes="*.jar" />
			</classpath>
		</taskdef>
		<!--
		<uptodate property="properties.isUpToDate" srcfile="properties.xml" >
			<mapper type="identity"/>
		</uptodate>
		<echo message="properties.isUpToDate: ${properties.isUpToDate}"/>
		-->
		<!-- test for dependencies/etc here -->
	</target>

	<target name="props" unless="properties.isUpToDate">
		<touch file="${metadata.dir}/api/hibernate/hibernate.cfg.xml"/>
		<echo message="properties.isUpToDate: ${properties.isUpToDate}"/>
	</target>

	<target name="clean" description="Delete build and dist directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="compile-api" depends="init" description="compile api">
		<mkdir dir="${build.dir}/api" />
		<!-- Copy hibernate metadata -->
		<copy todir="${build.dir}/api">
			<fileset dir="${metadata.dir}/api/hibernate" includes="**/*" />
			<fileset dir="${src.dir}/api" >
				<include name="**/*.java" />
				<exclude name="**/ibatis/*" />
				<exclude name="**/Ibatis*" />
			</fileset>
			<filterset refid="variables.to.replace" />
		</copy>
		<javac destdir="${build.dir}/api" 
		       debug="${compile.debug}" 
		       deprecation="${compile.deprecation}" 
		       optimize="${compile.optimize}" 
		       classpathref="api.compile.classpath">
			<src path="${build.dir}/api" />
			<include name="**/*.java" />
		</javac>
	</target>

	<target name="package-api" depends="compile-api" description="create api jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/openmrs-api-${app.version}.jar">
            <manifest>
                <attribute name="Class-Path" value="openmrs-api-${app.version}.jar"/>
            </manifest>
            <fileset dir="${build.dir}/api" includes="**/*" />
        </jar>
	</target>
	
	<target name="javadoc-api" description="generate api documentation">
		<delete dir="${doc.dir}/api" />
		<copy todir="${doc.dir}/api">
			<fileset file="${metadata.dir}/images/openmrs-logo-small.gif" />
		</copy>
		<javadoc packagenames="org.openmrs.*"
		         destdir="${doc.dir}/api"
                 classpathref="api.compile.classpath"
                 author="true"
		         version="true" 
		         windowtitle="${doc.title}"
			     header="${doc.header}"
			     footer="${doc.footer}"
			     bottom="${doc.bottom}">
			<fileset dir="${src.dir}/api" defaultexcludes="yes">
				<include name="org/openmrs/**/*.java" />
				<exclude name="**/.svn" />
			</fileset>
		</javadoc>
	</target>
	
	<target name="package-javadoc-api" depends="javadoc-api" description="packages api documentation">
		<delete file="${doc.dir}/api.zip" />
		<zip destfile="${doc.dir}/api.zip" basedir="${doc.dir}" includes="api/**" />
	</target>

	<target name="compile-api-tests" description="compile api tests">
		<mkdir dir="${build.dir}/test/api" />
		<javac srcdir="${test.dir}/api"
		       destdir="${build.dir}/api" 
		       debug="${compile.debug}" 
		       deprecation="${compile.deprecation}" 
		       optimize="${compile.optimize}" 
		       classpathref="api.test.classpath" />
	</target>

	<target name="package-api-tests" depends="compile-api-tests" description="create api-tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/openmrs-api-tests-${app.version}.jar">
            <manifest>
                <attribute name="Class-Path" value="openmrs-api-tests-${app.version}.jar"/>
            </manifest>
            <fileset dir="${build.dir}/test/api" />
        </jar>
	</target>

	<target name="compile-web" depends="package-api" description="compile webapp">	
		<mkdir dir="${build.dir}/web" />
		<copy todir="${build.dir}/web">
			<fileset dir="${src.dir}/web" includes="**/*.java"/>
			<filterset refid="variables.to.replace" />
		</copy>
		<javac srcdir="${build.dir}/web" 
				destdir="${build.dir}/web" 
				debug="${compile.debug}"
				deprecation="${compile.deprecation}" 
				optimize="${compile.optimize}" >
			<classpath>
				<path refid="web.compile.classpath"/>
				<path location="${dist.dir}/openmrs-api-${app.version}.jar"/>
			</classpath>
		</javac>
		<copy todir="${build.dir}/web">
			<fileset dir="web/WEB-INF">
				<include name="log4j.xml" />
				<include name="messages*" />
				<exclude name="**/lib/**" />
				<exclude name="**/classes/**" />
			</fileset>
			<filterset refid="variables.to.replace" />
		</copy>
	</target>

	<target name="package-web" depends="compile-web" description="create webapp war file">
		<mkdir dir="${dist.dir}" />
		
		<!-- copy the entire web directory to the dist folder (for variable replacement) -->
		<copy todir="${dist.dir}/web"
				preservelastmodified="true"
				overwrite="true">
			<fileset dir="web" >
				<exclude name="**/images/**/*" />
				<exclude name="**/*.xsn" />
				<exclude name="**/lib/**" />
				<exclude name="**/classes/**" />
			</fileset>
			<filterset refid="variables.to.replace" />
		</copy>
		<copy todir="${dist.dir}/web"
				preservelastmodified="true"
				overwrite="true">
			<fileset dir="web" >
				<include name="**/images/**/*" />
				<include name="**/*.xsn" />
			</fileset>
		</copy>
		<!-- Rename spring servlet to name of webapp -->
		<move file="${dist.dir}/web/WEB-INF/openmrs-servlet.xml"
				tofile="${dist.dir}/web/WEB-INF/${webapp.name}-servlet.xml"
				preservelastmodified="true"
				overwrite="true" />
		<!-- Customization -->
		<copy todir="${dist.dir}/web/WEB-INF/template"
				overwrite="true">
			<fileset dir="${custom.template.dir}" />
			<filterset refid="variables.to.replace" />
		</copy>
		<copy todir="${dist.dir}/web" overwrite="true">
			<fileset file="${custom.style.css.file}" />
			<filterset refid="variables.to.replace" />
		</copy>
		<copy todir="${dist.dir}/web/WEB-INF/view" overwrite="true">
				<fileset file="${custom.index.jsp.file}" />
				<filterset refid="variables.to.replace" />
		</copy>	
		<copy todir="${dist.dir}/web/images"
				overwrite="true">
			<fileset dir="${custom.images.dir}" />
		</copy>
		<!-- /Customization -->
		
		<!-- excludes web.xml to avoid warning message from duplicating @webxml reference -->
		<war destfile="${dist.dir}/${webapp.name}.war"
			 basedir="${dist.dir}/web"
			 excludes="**/web.xml"
		     webxml="${dist.dir}/web/WEB-INF/web.xml"
		     duplicate="add">
			<!-- war task isn't interpreting ${} variables on several attributes   -->
			<!-- (e.g., @basedir, webinf@dir) so using hardcoded values for now -->
			<classes dir="${build.dir}/web" />
            <!--<metainf dir="${metadata.dir}/web" includes="context.xml"/>-->
			<lib file="${dist.dir}/openmrs-api-${app.version}.jar" />
			<lib dir="${antlr.dir}" includes="*.jar" />
			<lib dir="${asm.dir}" includes="*.jar" />
			<lib dir="${c3p0.dir}" includes="*.jar" />
			<lib dir="${cglib.dir}" includes="*.jar" />
			<lib dir="${commons-beanutils.dir}" includes="*.jar" />
			<lib dir="${commons-collections.dir}" includes="*.jar" />
			<!--<lib dir="${commons-dbcp.dir}" includes="*.jar" />-->
			<lib dir="${commons-fileupload.dir}" includes="*.jar" />
			<lib dir="${commons-io.dir}" includes="*.jar" />
			<lib dir="${commons-lang.dir}" includes="*.jar" />
			<lib dir="${commons-logging.dir}" includes="*.jar" />
			<!--<lib dir="${commons-pool.dir}" includes="*.jar" />-->
			<lib dir="${dom4j.dir}" includes="*.jar" />
			<lib dir="${dwr.dir}" includes="*.jar" />
			<lib dir="${ehcache.dir}" includes="*.jar" />
			<lib dir="${hibernate.dir}" includes="*.jar" />
			<!--<lib dir="${ibatis.dir}" includes="*.jar" />-->
			<lib dir="${log4j.dir}" includes="*.jar" />
			<lib dir="${jstl.dir}" includes="*.jar" />
			<lib dir="${jta.dir}" includes="*.jar" />
			<lib dir="${junit.dir}" includes="*.jar" />
			<lib dir="${mysql.dir}" includes="*.jar" />
			<lib dir="${saxon.dir}" includes="*.jar" />
			<lib dir="${spring.dir}" includes="*.jar" />
			<lib dir="${taglibs.dir}" includes="*.jar" />
			<lib dir="${velocity.dir}" includes="*.jar" />
			<!--<lib dir="${struts.dir}" includes="*.jar" /> -->
			<!--<lib dir="${commons-digester.dir}" includes="*.jar" />  (for struts) -->
		</war>
		
		<!-- Delete the directory we just created in the dist folder (fills recycle bin) -->
		<!-- <delete dir="${dist.dir}\web" /> -->

	</target>

	<target name="compile-web-tests" description="compile webapp tests">
		<mkdir dir="${build.dir}/test/web" />
		<javac srcdir="${test.dir}/web" 
		       destdir="${build.dir}/test/web"
		       debug="${compile.debug}"
		       deprecation="${compile.deprecation}" 
		       optimize="${compile.optimize}" 
		       classpathref="web.test.classpath" />
	</target>

	<target name="package-web-tests" depends="compile-web-tests" description="create webapp tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${webapp.name}-web-tests-${webapp.version}.jar">
            <manifest>
                <attribute name="Class-Path" value="${webapp.name}-web-tests-${webapp.version}.jar"/>
            </manifest>
            <fileset dir="${build.dir}/test/web" />
        </jar>
	</target>

	<target name="dist" depends="package-web" description="create distribution packages" />

    <target name="install" description="Install application in Tomcat"
        depends="package-web">
        <deploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"
            war="${dist.dir}/${webapp.name}.war"/>
    </target>

    <target name="remove" description="Remove application in Tomcat">
    	<undeploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="update" description="Update application in Tomcat">
    	<antcall target="remove" />
    	<sleep seconds="5" />
    	<antcall target="install" />
    </target>

    <target name="reload" depends="package-web" description="Explode war and reload application in Tomcat">
		<mkdir dir="${tomcat.home}/webapps/${webapp.name}"/>
		<unzip src="${dist.dir}/${webapp.name}.war" dest="${tomcat.home}/webapps/${webapp.name}" overwrite="true"/>    
        <reload url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="start" description="Start Tomcat application">
        <start url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="stop" description="Stop Tomcat application">
        <stop url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="list" description="List Tomcat applications">
        <list url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"/>
    </target>

	<target name="schemaexport">
	    <taskdef name="schemaexport"
	        classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
	        classpathref="hibernate.classpath"/>
	    
	    <schemaexport
	    	config="${build.dir}/api/hibernate.cfg.xml"
	        quiet="no"
	        text="yes"
	        drop="no"
	        delimiter=";"
	        output="schema-export.sql">
	    </schemaexport>
	</target>
</project>
