<?xml version="1.0"?>
<!-- *********************************************************** -->
<!-- ** OpenMRS                                               ** -->
<!-- **                                                       ** -->
<!-- ** Open-Source EMR for Developing Countries              ** -->
<!-- **                                                       ** -->
<!-- ** @author Burke Mamlin                                  ** -->
<!-- ** @version 1.0                                          ** -->
<!-- *********************************************************** -->
<project name="OpenMRS" default="dist">
	<description>
    	Open-Source EMR for Developing Countries
    </description>

	<!-- import properties -->
	<import file="properties.xml" />

    <!-- Taskdefs -->
	<taskdef file="${tomcat.dir}/tomcatTasks.properties">
		<classpath>
			<pathelement path="${tomcat.dir}/catalina-ant.jar"/>
		</classpath>
	</taskdef>

	<!-- *********************************************************** -->
	<!-- **                     TARGETS                           ** -->
	<!-- *********************************************************** -->

	<target name="init" description="initialization">
        <!-- Taskdefs -->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<fileset dir="${ant-contrib.dir}" includes="*.jar" />
			</classpath>
		</taskdef>

		<!-- test for dependencies/etc here -->
	</target>

	<target name="clean" description="Delete build and dist directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="compile-api" description="compile api">
		<mkdir dir="${build.dir}/api" />
		
		<!-- Copy hibernate metadata -->
		<copy todir="${build.dir}/api">
			<fileset dir="${metadata.dir}/api/hibernate" includes="**/*" />
		</copy>

		<javac destdir="${build.dir}/api" 
		       debug="${compile.debug}" 
		       deprecation="${compile.deprecation}" 
		       optimize="${compile.optimize}" 
		       classpathref="api.compile.classpath">
			<src path="${src.dir}/api" />
			<include name="**/*.java" />
			<exclude name="**/ibatis/*" />
			<exclude name="**/Ibatis*" />
		</javac>
	</target>

	<target name="package-api" depends="compile-api" description="create api jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${app.name}-api-${app.version}.jar">
            <manifest>
                <attribute name="Class-Path" value="${app.name}-api-${app.version}.jar"/>
            </manifest>
            <fileset dir="${build.dir}/api" includes="**/*" />
        </jar>
	</target>
	
	<target name="javadoc-api" description="generate api documentation">
		<delete dir="${doc.dir}/api" />
		<copy todir="${doc.dir}/api">
			<fileset file="${metadata.dir}/images/openmrs-logo-small.gif" />
		</copy>
		<javadoc packagenames="org.openmrs.*"
		         destdir="${doc.dir}/api"
                 author="true"
		         version="true" 
		         windowtitle="${doc.title}"
			     header="${doc.header}"
			     footer="${doc.footer}"
			     bottom="${doc.bottom}">
			<fileset dir="${src.dir}/api" defaultexcludes="yes">
				<include name="org/openmrs/**/*.java" />
				<exclude name="**/.svn" />
			</fileset>
		</javadoc>
	</target>

	<target name="compile-api-tests" description="compile api tests">
		<mkdir dir="${build.dir}/test/api" />
		<javac srcdir="${test.dir}/api"
		       destdir="${build.dir}/api" 
		       debug="${compile.debug}" 
		       deprecation="${compile.deprecation}" 
		       optimize="${compile.optimize}" 
		       classpathref="api.test.classpath" />
	</target>

	<target name="package-api-tests" depends="compile-api-tests" description="create api-tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${app.name}-api-tests-${app.version}.jar">
            <manifest>
                <attribute name="Class-Path" value="${app.name}-api-tests-${app.version}.jar"/>
            </manifest>
            <fileset dir="${build.dir}/test/api" />
        </jar>
	</target>

	<target name="compile-web" depends="package-api" description="compile webapp">
		<mkdir dir="${build.dir}/web" />
		<javac srcdir="${src.dir}/web" 
		       destdir="${build.dir}/web" 
		       debug="${compile.debug}"
		       deprecation="${compile.deprecation}" 
		       optimize="${compile.optimize}" 
		       classpathref="web.compile.classpath" />
		<copy todir="${build.dir}/web">
			<fileset file="web/WEB-INF/log4j.xml" />
		</copy>
	</target>

	<target name="package-web" depends="compile-web" description="create webapp war file">
		<mkdir dir="${dist.dir}" />
		<!-- excludes web.xml to avoid warning message from duplicating @webxml reference -->
		<war destfile="${dist.dir}/${webapp.name}.war"
			 basedir="web"
			 excludes="**/web.xml"
		     webxml="web/WEB-INF/web.xml"
		     duplicate="fail">
			<!-- war task isn't interpreting ${} variables on several attributes   -->
			<!-- (e.g., @basedir, webinf@dir) so using hardcoded values for now -->
			<classes dir="${build.dir}/web" />
            <metainf dir="${metadata.dir}/web" includes="context.xml"/>
			<lib file="${dist.dir}/${app.name}-api-${app.version}.jar" />
			<lib dir="${antlr.dir}" includes="*.jar" />
			<lib dir="${asm.dir}" includes="*.jar" />
			<lib dir="${cglib.dir}" includes="*.jar" />
			<lib dir="${commons-beanutils.dir}" includes="*.jar" />
			<lib dir="${commons-collections.dir}" includes="*.jar" />
			<lib dir="${commons-dbcp.dir}" includes="*.jar" />
			<lib dir="${commons-fileupload.dir}" includes="*.jar" />
			<lib dir="${commons-lang.dir}" includes="*.jar" />
			<lib dir="${commons-logging.dir}" includes="*.jar" />
			<lib dir="${commons-pool.dir}" includes="*.jar" />
			<lib dir="${dom4j.dir}" includes="*.jar" />
			<lib dir="${dwr.dir}" includes="*.jar" />
			<lib dir="${ehcache.dir}" includes="*.jar" />
			<lib dir="${hibernate.dir}" includes="*.jar" />
			<lib dir="${ibatis.dir}" includes="*.jar" />
			<lib dir="${log4j.dir}" includes="*.jar" />
			<lib dir="${jstl.dir}" includes="*.jar" />
			<lib dir="${jta.dir}" includes="*.jar" />
			<lib dir="${junit.dir}" includes="*.jar" />
			<lib dir="${mysql.dir}" includes="*.jar" />
			<lib dir="${spring.dir}" includes="*.jar" />
			<lib dir="${taglibs.dir}" includes="*.jar" />
			<lib dir="${velocity.dir}" includes="*.jar" />
			<lib dir="${struts.dir}" includes="*.jar" />
			<lib dir="${commons-digester.dir}" includes="*.jar" />
		</war>
	</target>

	<target name="compile-web-tests" description="compile webapp tests">
		<mkdir dir="${build.dir}/test/web" />
		<javac srcdir="${test.dir}/web" 
		       destdir="${build.dir}/test/web"
		       debug="${compile.debug}"
		       deprecation="${compile.deprecation}" 
		       optimize="${compile.optimize}" 
		       classpathref="web.test.classpath" />
	</target>

	<target name="package-web-tests" depends="compile-web-tests" description="create webapp tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${webapp.name}-web-tests-${webapp.version}.jar">
            <manifest>
                <attribute name="Class-Path" value="${webapp.name}-web-tests-${webapp.version}.jar"/>
            </manifest>
            <fileset dir="${build.dir}/test/web" />
        </jar>
	</target>

	<target name="dist" depends="package-web" description="create distribution packages" />

    <target name="install" description="Install application in Tomcat"
        depends="package-web">
        <deploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"
            war="${dist.dir}/${webapp.name}.war"/>
    </target>

    <target name="remove" description="Remove application in Tomcat">
        <undeploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="update" description="Update application in Tomcat">
    	<antcall target="remove" />
    	<sleep seconds="5" />
    	<antcall target="install" />
    </target>

    <target name="reload" description="Reload application in Tomcat">
        <reload url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="start" description="Start Tomcat application">
        <start url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="stop" description="Stop Tomcat application">
        <stop url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="list" description="List Tomcat applications">
        <list url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"/>
    </target>
		
</project>

