<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<hibernate-mapping package="org.openmrs">

	<joined-subclass name="User" table="users" extends="Person">

		<key column="user_id" not-null="true" on-delete="cascade" />
		
		<property name="userId" type="int" not-null="true" access="field"
			column="user_id" update="false" insert="false" />
		
		<property name="systemId" type="java.lang.String"
			not-null="true" column="system_id" length="50" />

		<property name="username" type="java.lang.String" length="50" />

		<many-to-one name="creator" class="User" not-null="true" />

		<property name="dateCreated" type="java.util.Date"
			column="date_created" not-null="true" length="19" />

		<many-to-one name="changedBy" class="User" column="changed_by" />

		<property name="dateChanged" type="java.util.Date"
			column="date_changed" length="19" />

		<property name="voided" type="java.lang.Boolean" column="voided"
			length="1" not-null="true" />

		<many-to-one name="voidedBy" class="User" column="voided_by" />

		<property name="dateVoided" type="java.util.Date"
			column="date_voided" length="19" />

		<property name="voidReason" type="java.lang.String"
			column="void_reason" length="255" />

		<property name="secretQuestion" type="java.lang.String"
			column="secret_question" length="255" />

		<!-- Associations -->

		<!-- bi-directional many-to-many association to Role -->
		<set name="roles" table="user_role" lazy="false"
			cascade="save-update,merge,evict">
			<!-- <cache usage="read-write"/>-->
			<key>
				<column name="user_id" />
			</key>
			<many-to-many class="Role">
				<column name="role" />
			</many-to-many>
		</set>

		<map name="userProperties" table="user_property" lazy="true"
			cascade="save-update,merge,evict">
			<key column="user_id" not-null="true" />
			<map-key column="property" type="java.lang.String"
				length="100" />
			<element column="property_value" type="java.lang.String"
				length="255" />
		</map>

	</joined-subclass>
	
	<sql-query name="updateUserPassword" >
	    <return-scalar column="user_id" type="integer" />
		<query-param name="newHashedPassword" type="string"/>
		<query-param name="newHashedSalt" type="string"/>
		<query-param name="changedByUserId" type="Integer"/>
		<query-param name="dateChanged" type="java.lang.Date"/>
		<query-param name="userId" type="Integer"/>

		call update_user_password(:newHashedPassword, :newHashedSalt, :changedByUserId, :dateChanged, :userId);
	</sql-query>
	
	<sql-query name="insertUserStub" >
	    <return-scalar column="user_id" type="integer" />
		<query-param name="userId" type="integer"/>
		<query-param name="systemId" type="string"/>
		<query-param name="creatorId" type="integer"/>
		<query-param name="dateCreated" type="java.lang.Date"/>

		call insert_user_stub(:userId, :systemId, :creatorId, :dateCreated);
	</sql-query>
	
	<database-object>
		<create>
			CREATE 
				PROCEDURE update_user_password (
				IN new_password VARCHAR(255),
				IN new_salt VARCHAR(255),
				IN new_changed_by INT,
				IN new_date_changed DATETIME,
				IN user_id_to_change INT
				)
	  		BEGIN
	    		UPDATE
	    			`users`
	    		SET
	    			`password` = new_password,
	    			`salt` = new_salt,
	    			`changed_by` = new_changed_by,
	    			`date_changed` = new_date_changed
	    		WHERE
	    			`user_id` = user_id_to_change;
	    			
	    		SELECT user_id_to_change as user_id FROM DUAL;
	  		END;
	  		
		</create>
		<drop>
			DROP PROCEDURE IF EXISTS update_user_password;
		</drop>
	</database-object>
	
	<database-object>
		<create>
			CREATE 
				PROCEDURE insert_user_stub (
				IN new_user_id INT,
				IN new_system_id VARCHAR(255),
				IN new_creator_id INT,
				IN new_date_created DATETIME,
				)
	  		BEGIN
	  			INSERT INTO `user`
		  			(user_id, system_id, creator, date_created)
	  			VALUES (
	  				new_user_id,
	  				new_system_id,
	  				new_creator_id,
	  				new_date_created
	  				);
	    			
	    		SELECT new_user_id as user_id FROM DUAL;
	  		END;
	  		
		</create>
		<drop>
			DROP PROCEDURE IF EXISTS insert_user_stub;
		</drop>
	</database-object>
	
</hibernate-mapping>
